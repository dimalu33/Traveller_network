// src/components/PostImage.tsx
import React, { useState, useEffect, useMemo } from 'react';
import { IMAGE_SERVICE_BASE_URL } from '../services/api'; // –¶–µ –º–∞—î –±—É—Ç–∏ http://localhost:8000

interface PostImageProps {
    imageUrl: string | null | undefined; // –î–æ–∑–≤–æ–ª—è—î–º–æ null –∞–±–æ undefined –¥–ª—è –±—ñ–ª—å—à–æ—ó –≥–Ω—É—á–∫–æ—Å—Ç—ñ
    alt: string;
}

const PostImage: React.FC<PostImageProps> = ({ imageUrl, alt }) => {
    const [isLoading, setIsLoading] = useState(true);
    const [hasError, setHasError] = useState(false);
    const [derivedImageUrl, setDerivedImageUrl] = useState<string | null>(null);

    // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ useMemo –¥–ª—è –æ–±—á–∏—Å–ª–µ–Ω–Ω—è URL, —â–æ–± —Ü–µ –≤—ñ–¥–±—É–≤–∞–ª–æ—Å—è –ª–∏—à–µ –ø—Ä–∏ –∑–º—ñ–Ω—ñ imageUrl
    const finalImageUrlToLoad = useMemo(() => {
        if (!imageUrl) {
            return null;
        }

        try {
            // imageUrl —Ü–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "http://localhost:3003/processed_images/image.png"
            const urlObject = new URL(imageUrl);
            // urlObject.pathname –±—É–¥–µ "/processed_images/image.png"
            // IMAGE_SERVICE_BASE_URL —Ü–µ "http://localhost:8000"
            const gatewayUrl = `${IMAGE_SERVICE_BASE_URL}${urlObject.pathname}`;
            // –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ gatewayUrl –±—É–¥–µ "http://localhost:8000/processed_images/image.png"
            return gatewayUrl;
        } catch (error) {
            console.error(
                `[PostImage] Failed to parse imageUrl ('${imageUrl}') as a full URL. Assuming it might be a relative path or invalid. Error:`,
                error
            );
            // –Ø–∫—â–æ —Ü–µ –Ω–µ –ø–æ–≤–Ω–∏–π URL, —ñ —è–∫—â–æ –≤—ñ–Ω –Ω–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ '/', –¥–æ–¥–∞–º–æ —Å–ª–µ—à.
            // –¶–µ –∑–∞–ø–∞—Å–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç, —è–∫—â–æ –¥–∞–Ω—ñ –∑ –±–µ–∫–µ–Ω–¥—É –Ω–µ—Å–ø–æ–¥—ñ–≤–∞–Ω–æ –∑–º—ñ–Ω—è—Ç—å—Å—è.
            // –£ –≤–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É, –∑–≥—ñ–¥–Ω–æ –∑ –≤—ñ–¥–ø–æ–≤—ñ–¥–¥—é API, imageUrl –∑–∞–≤–∂–¥–∏ –ø–æ–≤–Ω–∏–π.
            if (typeof imageUrl === 'string') {
                // –Ø–∫—â–æ —Ü–µ –≤–∂–µ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö, —è–∫–∏–π –ø–æ—Ç—Ä—ñ–±–µ–Ω (–º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ —É –≤–∞—à–æ–º—É –≤–∏–ø–∞–¥–∫—É)
                if (imageUrl.startsWith('/processed_images/')) {
                    return `${IMAGE_SERVICE_BASE_URL}${imageUrl}`;
                }
                // –Ø–∫—â–æ —Ü–µ –ø—Ä–æ—Å—Ç–æ —ñ–º'—è —Ñ–∞–π–ª—É (—â–µ –º–µ–Ω—à –π–º–æ–≤—ñ—Ä–Ω–æ)
                // return `${IMAGE_SERVICE_BASE_URL}/processed_images/${imageUrl}`;
            }
            return null; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ URL
        }
    }, [imageUrl]); // –ó–∞–ª–µ–∂–Ω—ñ—Å—Ç—å –≤—ñ–¥ imageUrl

    useEffect(() => {
        // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω–∏, –∫–æ–ª–∏ finalImageUrlToLoad –∑–º—ñ–Ω—é—î—Ç—å—Å—è
        if (finalImageUrlToLoad) {
            setIsLoading(true);
            setHasError(false);
            setDerivedImageUrl(finalImageUrlToLoad); // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è —É –≤–∏–ø–∞–¥–∫—É –ø–æ–º–∏–ª–∫–∏
        } else if (imageUrl) { // –Ø–∫—â–æ imageUrl —î, –∞–ª–µ finalImageUrlToLoad —Å—Ç–∞–≤ null (–ø–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É)
            setIsLoading(false);
            setHasError(true);
            setDerivedImageUrl(imageUrl); // –ü–æ–∫–∞–∑—É—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π URL, –∑ —è–∫–∏–º –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞
        } else { // –Ø–∫—â–æ imageUrl –Ω–µ–º–∞—î
            setIsLoading(false);
            setHasError(false); // –ù–µ–º–∞—î –ø–æ–º–∏–ª–∫–∏, –ø—Ä–æ—Å—Ç–æ –Ω–µ–º–∞—î –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            setDerivedImageUrl(null);
        }
    }, [finalImageUrlToLoad, imageUrl]);

    const handleLoad = () => {
        setIsLoading(false);
        setHasError(false);
    };

    const handleError = () => {
        console.error('[PostImage] Failed to load image:', finalImageUrlToLoad || derivedImageUrl || "URL not available");
        setIsLoading(false);
        setHasError(true);
    };

    if (!imageUrl) { // –Ø–∫—â–æ imageUrl –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∑ —Å–∞–º–æ–≥–æ –ø–æ—á–∞—Ç–∫—É
        return null; // –ê–±–æ –ø–æ–∫–∞–∑–∞—Ç–∏ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä, —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ
    }

    if (hasError || !finalImageUrlToLoad) { // –Ø–∫—â–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∞–±–æ URL –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏
        return (
            <div style={{
                width: '100%',
                minHeight: '200px', // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ minHeight –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
                backgroundColor: '#f8f9fa',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: '#dc3545', // –ß–µ—Ä–≤–æ–Ω–∏–π –∫–æ–ª—ñ—Ä –¥–ª—è –ø–æ–º–∏–ª–∫–∏
                fontSize: '14px',
                border: '1px solid #e1e8ed',
                padding: '10px',
                textAlign: 'center'
            }}>
                <div>
                    üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.
                    {derivedImageUrl && <div style={{ fontSize: '12px', wordBreak: 'break-all', marginTop: '5px' }}>URL: {derivedImageUrl}</div>}
                </div>
            </div>
        );
    }

    return (
        <div style={{ width: '100%', position: 'relative', minHeight: isLoading ? '200px' : 'auto' /* –ü–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä –ø–æ–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂—É—î—Ç—å—Å—è */ }}>
            {isLoading && (
                <div style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    backgroundColor: '#f8f9fa',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: '#657786',
                    fontSize: '14px',
                    zIndex: 1,
                    minHeight: '200px' // –©–æ–± –ª–æ–∞–¥–µ—Ä –º–∞–≤ —Ä–æ–∑–º—ñ—Ä
                }}>
                    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...
                </div>
            )}
            <img
                src={finalImageUrlToLoad} // –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Ü–µ–π URL –¥–ª—è —Ç–µ–≥—É img
                alt={alt}
                onLoad={handleLoad}
                onError={handleError}
                style={{
                    width: '100%',
                    maxHeight: '500px',
                    objectFit: 'cover',
                    display: 'block',
                    opacity: isLoading || hasError ? 0 : 1, // –•–æ–≤–∞—î–º–æ, —è–∫—â–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–±–æ –ø–æ–º–∏–ª–∫–∞
                    transition: 'opacity 0.3s ease'
                }}
            />
        </div>
    );
};

export default PostImage;