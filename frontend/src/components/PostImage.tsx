// src/components/PostImage.tsx
import React, { useState, useEffect, useMemo } from 'react';
import { IMAGE_SERVICE_BASE_URL } from '../services/api'; // –¶–µ –º–∞—î –±—É—Ç–∏ http://localhost:8000

interface PostImageProps {
    imageUrl: string | null | undefined; // –î–æ–∑–≤–æ–ª—è—î–º–æ null –∞–±–æ undefined –¥–ª—è –±—ñ–ª—å—à–æ—ó –≥–Ω—É—á–∫–æ—Å—Ç—ñ
    alt: string;
}

const PostImage: React.FC<PostImageProps> = ({ imageUrl, alt }) => {
    const [isLoading, setIsLoading] = useState(true);
    const [hasError, setHasError] = useState(false);
    const [derivedImageUrl, setDerivedImageUrl] = useState<string | null>(null);

    const finalImageUrlToLoad = useMemo(() => {
        if (!imageUrl) { // –Ø–∫—â–æ imageUrl —Ü–µ null, undefined, –∞–±–æ –ø–æ—Ä–æ–∂–Ω—ñ–π —Ä—è–¥–æ–∫
            return null;
        }

        try {
            // imageUrl —Ü–µ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥, "http://localhost:3003/processed_images/image.png"
            const urlObject = new URL(imageUrl);
            // urlObject.pathname –±—É–¥–µ "/processed_images/image.png"
            // IMAGE_SERVICE_BASE_URL —Ü–µ "http://localhost:8000"
            const gatewayUrl = `${IMAGE_SERVICE_BASE_URL}${urlObject.pathname}`;
            // –í —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ gatewayUrl –±—É–¥–µ "http://localhost:8000/processed_images/image.png"
            return gatewayUrl;
        } catch (error) {
            console.error(
                `[PostImage] Failed to parse imageUrl ('${imageUrl}') as a full URL. Error:`,
                error
            );
            // –°–ø—Ä–æ–±–∞ –æ–±—Ä–æ–±–∏—Ç–∏, —è–∫—â–æ —Ü–µ –≤—ñ–¥–Ω–æ—Å–Ω–∏–π —à–ª—è—Ö (–º–∞–ª–æ–π–º–æ–≤—ñ—Ä–Ω–æ, –∑–≥—ñ–¥–Ω–æ –∑ –≤–∞—à–∏–º API)
            if (typeof imageUrl === 'string') {
                if (imageUrl.startsWith('/processed_images/')) {
                    return `${IMAGE_SERVICE_BASE_URL}${imageUrl}`;
                }
                // –Ø–∫—â–æ —Ü–µ –≤–∂–µ –ø–æ–≤–Ω–∏–π URL, —è–∫–∏–π –≤–∫–∞–∑—É—î –Ω–∞ API Gateway
                if (imageUrl.startsWith(IMAGE_SERVICE_BASE_URL) && imageUrl.includes('/processed_images/')) {
                    return imageUrl;
                }
            }
            return null; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ null, —è–∫—â–æ –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏ URL
        }
    }, [imageUrl]);

    useEffect(() => {
        if (finalImageUrlToLoad) {
            setIsLoading(true);
            setHasError(false);
            setDerivedImageUrl(finalImageUrlToLoad);
        } else if (imageUrl) {
            setIsLoading(false);
            setHasError(true);
            setDerivedImageUrl(imageUrl); // –î–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø—Ä–æ–±–ª–µ–º–Ω–æ–≥–æ URL
        } else { // imageUrl –≤—ñ–¥—Å—É—Ç–Ω—ñ–π –∞–±–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–∏–π
            setIsLoading(false);
            setHasError(false);
            setDerivedImageUrl(null);
        }
    }, [finalImageUrlToLoad, imageUrl]);

    const handleLoad = () => {
        setIsLoading(false);
        setHasError(false);
    };

    const handleError = () => {
        console.error('[PostImage] Failed to load image:', finalImageUrlToLoad || derivedImageUrl || "URL not available");
        setIsLoading(false);
        setHasError(true);
    };

    // –Ø–∫—â–æ imageUrl —Å–ø–æ—á–∞—Ç–∫—É null –∞–±–æ undefined, –Ω—ñ—á–æ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º–æ
    if (!imageUrl) {
        return null;
    }

    // –Ø–∫—â–æ URL –Ω–µ –≤–¥–∞–ª–æ—Å—è —Å—Ñ–æ—Ä–º—É–≤–∞—Ç–∏, –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    if (hasError || !finalImageUrlToLoad) {
        return (
            <div style={{
                width: '100%',
                minHeight: '200px',
                backgroundColor: '#f8f9fa',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                color: '#dc3545',
                fontSize: '14px',
                borderTop: '1px solid #e1e8ed', // –î–æ–¥–∞–≤ –≤–µ—Ä—Ö–Ω—ñ–π –±–æ—Ä–¥–µ—Ä –¥–ª—è –≤—ñ–¥–æ–∫—Ä–µ–º–ª–µ–Ω–Ω—è
                borderBottom: '1px solid #e1e8ed', // –î–æ–¥–∞–≤ –Ω–∏–∂–Ω—ñ–π –±–æ—Ä–¥–µ—Ä
                padding: '10px',
                textAlign: 'center',
                boxSizing: 'border-box'
            }}>
                <div>
                    üì∑ –ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–µ.
                    {derivedImageUrl && <div style={{ fontSize: '12px', wordBreak: 'break-all', marginTop: '5px' }}>URL: {derivedImageUrl}</div>}
                </div>
            </div>
        );
    }

    return (
        <div style={{ width: '100%', position: 'relative', minHeight: isLoading ? '200px' : 'auto', borderTop: '1px solid #e1e8ed', borderBottom: '1px solid #e1e8ed' }}>
            {isLoading && (
                <div style={{
                    position: 'absolute',
                    top: 0,
                    left: 0,
                    right: 0,
                    bottom: 0,
                    backgroundColor: '#f8f9fa',
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    color: '#657786',
                    fontSize: '14px',
                    zIndex: 1,
                    minHeight: '200px'
                }}>
                    –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è...
                </div>
            )}
            <img
                src={finalImageUrlToLoad}
                alt={alt}
                onLoad={handleLoad}
                onError={handleError}
                style={{
                    width: '100%',
                    maxHeight: '600px', // –ó–±—ñ–ª—å—à–∏–≤ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É –≤–∏—Å–æ—Ç—É –¥–ª—è –∫—Ä–∞—â–æ–≥–æ –≤–∏–≥–ª—è–¥—É
                    objectFit: 'contain', // –ó–º—ñ–Ω–∏–≤ –Ω–∞ contain, —â–æ–± –±–∞—á–∏—Ç–∏ –≤—Å–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è, –º–æ–∂–Ω–∞ –ø–æ–≤–µ—Ä–Ω—É—Ç–∏ cover
                    display: 'block',
                    opacity: isLoading || hasError ? 0 : 1,
                    transition: 'opacity 0.3s ease',
                    backgroundColor: isLoading ? '#f0f0f0' : 'transparent' // –§–æ–Ω –¥–ª—è –ª–æ–∞–¥–µ—Ä–∞
                }}
            />
        </div>
    );
};

export default PostImage;